dim(envdat_ex)
envdat_ex_occ <- envdat_ex[ , ,occExample] 


get_range_df <- function(envdat){
  p <- dim(envdat)[1]
  
  ranges <- data.frame(lower  = NA*numeric(numparms(p)),
                       center = NA*numeric(numparms(p)),
                       upper  = NA*numeric(numparms(p))
                       )
  
  q <- (p^2-p)/2
  
  O_inds = 1:(q) 
  mu_inds = (1 + q ):(q + p)
  sigLtil_inds = (1 + q + p ):(q + 2*p)
  sigRtil_inds = (1 + q + 2*p ):(q + 3*p)
  pd_inds = (1 + q + 3*p):(numparms(p) - 1) 
  ctil_inds = numparms(p)
  
  rownames(ranges)[O_inds] = paste0("O",1:q)
  rownames(ranges)[mu_inds] = paste0("mu",1:p)
  rownames(ranges)[sigLtil_inds] = paste0("sigLtil", 1:p)
  rownames(ranges)[sigRtil_inds] = paste0("sigRtil", 1:p)
  rownames(ranges)[pd_inds] = "pd"
  rownames(ranges)[ctil_inds] = "ctil"
  
  #get reasonable ranges of mu, sigL and sigR values
  for (counter in 1:p)
  {
    h = as.numeric(env[counter,, occ == 1])
    
    #get the mu range
    ranges[mu_inds[counter], ] = unname(quantile(h, probs = c(0.1, 0.5, 0.9)))
    
    #get mu center
    mu_center = ranges[mu_inds[counter], 2]
    
    #get the sigL range
    h2 = sqrt(mean( (h[ h < mu_center] - mu_center)^2) )
    ranges[sigLtil_inds[counter],] = log(c(h2/2, h2, 2* h2)) #the log is because we want these on the math scale
    
    #get the sigR range
    h2 = sqrt(mean((h[ h > mu_center] - mu_center)^2))
    ranges[sigRtil_inds[counter], ] = log(c(h2/2, h2, 2*h2)) #the log is because we want these on the math scale
  }
  
  ranges[O_inds, 1] = -10
  ranges[O_inds, 2] = 0
  ranges[O_inds, 3] = 10
  
  #pd parameters
  ranges[pd_inds,] = rje::logit(c(0.1, 0.5, 0.9))
  
  ## ctil range. 
  
  # 1. Evaluate lolik in  central values of all the other parameters
  # 2. Pick the central ctil to be the opposite of the median of those values.
  
  #  For those central parameters
  #  half the probabilities of detection will be < 0.5 
  # the other half will be > 0.5.
  # 3. Pick the lower and upper ctil based on quantiles of the distribution
  
  O_star <- build_O_matrix( ranges[O_inds, 2] )
  mu_star <- ranges[mu_inds, 2]
  sigLtil_star <- exp(ranges[sigLtil_inds, 2])
  sigRtil_star <- exp(ranges[sigRtil_inds, 2])
  h_star <- like_neg_ltsgr_cpp(O_star, mu_star, sigLtil_star, sigRtil_star, envdat)
  ranges[ctil_inds, ] <- -unname(quantile(h_star, c(0.9, 0.5, 0.1) ) )
  
  ## reshape the data.frame
  
  ranges
  
}